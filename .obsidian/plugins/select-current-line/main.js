/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SelectCurrentLinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function selectLine(editor) {
  const { line } = editor.getCursor();
  const lineText = editor.getLine(line);
  editor.setSelection({ line, ch: 0 }, { line, ch: lineText.length });
}
var SelectCurrentLinePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "select-current-line-on-keystroke",
      name: "select the current line in editor",
      hotkeys: [{ modifiers: [], key: "Escape" }],
      editorCallback: (editor) => {
        selectLine(editor);
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgRWRpdG9yLCBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuXG4vLyBzZWxlY3RzIHRoZSBlbnRpcmUgbGluZSBmcm9tIGluZGV4IHplcm9cbmZ1bmN0aW9uIHNlbGVjdExpbmUoZWRpdG9yOiBFZGl0b3IpIHtcbiAgICBjb25zdCB7IGxpbmUgfSA9IGVkaXRvci5nZXRDdXJzb3IoKTtcbiAgICBjb25zdCBsaW5lVGV4dCA9IGVkaXRvci5nZXRMaW5lKGxpbmUpO1xuICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oeyBsaW5lLCBjaDogMCB9LCB7IGxpbmUsIGNoOiBsaW5lVGV4dC5sZW5ndGggfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEN1cnJlbnRMaW5lUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFxuXHRcdC8vIFRoaXMgYWRkcyBhbiBlZGl0b3IgY29tbWFuZCBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2Vcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdzZWxlY3QtY3VycmVudC1saW5lLW9uLWtleXN0cm9rZScsXG5cdFx0XHRuYW1lOiAnc2VsZWN0IHRoZSBjdXJyZW50IGxpbmUgaW4gZWRpdG9yJyxcblx0XHRcdGhvdGtleXM6IFt7bW9kaWZpZXJzOiBbXSwga2V5OiAnRXNjYXBlJ31dLFxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xuXHRcdFx0XHRzZWxlY3RMaW5lKGVkaXRvcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE2QztBQUk3QyxTQUFTLFdBQVcsUUFBZ0I7QUFDaEMsUUFBTSxFQUFFLEtBQUssSUFBSSxPQUFPLFVBQVU7QUFDbEMsUUFBTSxXQUFXLE9BQU8sUUFBUSxJQUFJO0FBQ3BDLFNBQU8sYUFBYSxFQUFFLE1BQU0sSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLElBQUksU0FBUyxPQUFPLENBQUM7QUFDdEU7QUFFQSxJQUFxQiwwQkFBckIsY0FBcUQsdUJBQU87QUFBQSxFQUUzRCxNQUFNLFNBQVM7QUFHZCxTQUFLLFdBQVc7QUFBQSxNQUNmLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxFQUFDLFdBQVcsQ0FBQyxHQUFHLEtBQUssU0FBUSxDQUFDO0FBQUEsTUFDeEMsZ0JBQWdCLENBQUMsV0FBbUI7QUFDbkMsbUJBQVcsTUFBTTtBQUFBLE1BQ2xCO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQ1g7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
